"use strict";

require("core-js/modules/es.promise");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RelativeCiAgentWebpackPlugin = void 0;

var _process = _interopRequireDefault(require("process"));

var _lodash = require("lodash");

var _webpack = require("@bundle-stats/utils/lib/webpack");

var _agent = require("./agent");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const PLUGIN_NAME = 'RelativeCiAgent';
const DEFAULT_OPTIONS = {
  includeCommitMessage: true,
  stats: {
    context: _process.default.cwd(),
    assets: true,
    entrypoints: true,
    chunks: true,
    modules: true
  }
};

const getOnEmit = options => async (compilation, callback) => {
  const {
    stats: statsOptions
  } = options,
        agentOptions = _objectWithoutProperties(options, ["stats"]);

  const data = compilation.getStats().toJson(statsOptions);
  const logger = compilation.getInfrastructureLogger ? compilation.getInfrastructureLogger(PLUGIN_NAME) : console;
  const invalidData = (0, _webpack.validate)(data);

  if (invalidData) {
    logger.warn(invalidData);
    return;
  }

  try {
    await (0, _agent.agent)([{
      key: 'webpack.stats',
      data
    }], agentOptions, logger);
    callback();
  } catch (err) {
    logger.warn(err);
  }
};

class RelativeCiAgentWebpackPlugin {
  constructor(options) {
    this.options = options;
  }

  apply(compiler) {
    const {
      isCi
    } = (0, _utils.getEnvCI)();
    const options = (0, _lodash.merge)({}, DEFAULT_OPTIONS, {
      enabled: isCi,
      stats: {
        context: (0, _lodash.get)(compiler, 'options.context')
      }
    }, this.options); // Skip if not enabled

    if (!options.enabled) {
      return;
    }

    compiler.hooks.emit.tapAsync(PLUGIN_NAME, getOnEmit(options));
  }

}

exports.RelativeCiAgentWebpackPlugin = RelativeCiAgentWebpackPlugin;