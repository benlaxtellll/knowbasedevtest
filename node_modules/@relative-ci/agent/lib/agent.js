"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.agent = void 0;

var _dotenv = _interopRequireDefault(require("dotenv"));

var _lodash = require("lodash");

var _webpack = require("@bundle-stats/utils/lib/webpack");

var _package = _interopRequireDefault(require("../package.json"));

var LOCALES = _interopRequireWildcard(require("../locales/en"));

var _send = _interopRequireDefault(require("./send"));

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const DEFAULT_ENDPOINT = 'https://api.relative-ci.com/save';
const WEBPACK_STATS = 'webpack.stats';
const SOURCE_EXTRACTORS = {
  [WEBPACK_STATS]: _webpack.filter
};

const getFilteredData = artifactsData => artifactsData.reduce((agg, {
  key,
  data,
  options
}) => (0, _lodash.set)(agg, key, SOURCE_EXTRACTORS[key](data, options)), {});

const agent = (artifactsData, config, logger = console) => {
  _dotenv.default.config();

  const envCIVars = (0, _utils.getEnvCI)();
  (0, _utils.debug)('env-ci params', envCIVars);
  const {
    includeCommitMessage
  } = config;
  let slug = process.env.RELATIVE_CI_SLUG;

  if (!slug) {
    (0, _utils.debug)('RELATIVE_CI_SLUG not available, using env-ci');
    slug = envCIVars.slug;
  }

  const params = _objectSpread({
    key: process.env.RELATIVE_CI_KEY,
    endpoint: process.env.RELATIVE_CI_ENDPOINT || DEFAULT_ENDPOINT,
    agentVersion: _package.default.version
  }, envCIVars, {
    branch: envCIVars.branch || envCIVars.prBranch,
    slug
  }, includeCommitMessage ? {
    commitMessage: (0, _utils.getCommitMessage)()
  } : {});

  (0, _utils.debug)('Job parameters', params);

  if (!params.key) {
    return logger.warn(LOCALES.AGENT_MISSING_KEY_ERROR);
  }

  if (!params.slug) {
    return logger.warn(LOCALES.AGENT_MISSING_SLUG_ERROR);
  }

  if (!params.commit) {
    return logger.warn(LOCALES.AGENT_MISSING_COMMIT_ERROR);
  }

  if (!params.branch) {
    return logger.warn(LOCALES.AGENT_MISSING_BRANCH_ERROR);
  } // Filter only the necessary data


  const filteredData = getFilteredData(artifactsData);
  return (0, _send.default)(filteredData, params, logger);
};

exports.agent = agent;