"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_portal_1 = require("react-portal");
const outline_icons_1 = require("outline-icons");
const FloatingToolbar_1 = __importDefault(require("./FloatingToolbar"));
const ToolbarButton_1 = __importDefault(require("./ToolbarButton"));
const isNodeActive_1 = __importDefault(require("../queries/isNodeActive"));
const Comments_1 = require("../plugins/Comments");
const styled_components_1 = __importStar(require("styled-components"));
function isActive(props) {
    const { view } = props;
    const { selection } = view.state;
    return selection && !selection.empty && !selection.node;
}
class CommentToolbar extends React.Component {
    render() {
        const { view, isTemplate } = this.props;
        const { state } = view;
        const isCodeSelection = isNodeActive_1.default(state.schema.nodes.code_block)(state);
        if (isCodeSelection || isTemplate || Comments_1.isCommentActive(view.state)) {
            return null;
        }
        return (React.createElement(react_portal_1.Portal, null,
            React.createElement(FloatingToolbar_1.default, { view: view, active: isActive(this.props) },
                React.createElement(ToolbarButton_1.default, { onClick: () => this.props.commands.comments({ force: true }) },
                    React.createElement(outline_icons_1.CommentIcon, { color: this.props.theme.toolbarItem }),
                    " ",
                    React.createElement(Text, null, this.props.dictionary.leaveAComment)))));
    }
}
const Text = styled_components_1.default("span") `
  color: ${props => props.theme.toolbarItem};
  font-size: 14px;
  margin-left: 4px;
`;
exports.default = styled_components_1.withTheme(CommentToolbar);
//# sourceMappingURL=CommentToolbar.js.map